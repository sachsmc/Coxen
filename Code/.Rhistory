install.packages("knitr")
library(knitr)
install.packages("knitr")
library(devtools)
install.packages("devtools")
library(devtools)
find_rtools()
library(devtools)
find_rtools()
library(devtools)
find_rtools()
dput(mtcars)
matrix(rnorm(150), nrow = 30)
matrix(rnorm(5*20), nrow = 20)
cor(matrix(rnorm(150), nrow = 30))
cor(matrix(rnorm(5*20), nrow = 20))
U <- cor(matrix(rnorm(150), nrow = 30))
V <- cor(matrix(rnorm(5*20), nrow = 20))
t(v)
t(V)
t(V) == V
cor(U, V)
U
V
j <- 1
(U[,j] - mean(U[,j]))*(V[,j] - mean(V[,j]))/(sd(U[,j])*sd(V[,j]))
sum((U[,j] - mean(U[,j]))*(V[,j] - mean(V[,j])))/(sd(U[,j])*sd(V[,j]))
mean((U[,j] - mean(U[,j]))*(V[,j] - mean(V[,j])))/(sd(U[,j])*sd(V[,j]))
sum((U[,j] - mean(U[,j]))*(V[,j] - mean(V[,j])))/(5*sd(U[,j])*sd(V[,j]))
cor(U[,j], V[,j])
sum((U[,j] - mean(U[,j]))*(V[,j] - mean(V[,j])))/(5*sd(U[,j])*sd(V[,j]))
sum((U[,j] - mean(U[,j]))*(V[,j] - mean(V[,j])))/(5*sd(U[,j])*sd(V[,j]))^2
sqrt(sum((U[,j] - mean(U[,j]))*(V[,j] - mean(V[,j])))/(5*sd(U[,j])*sd(V[,j])))
U
V
sum((U[,j] - mean(U[,j]))*(V[,j] - mean(V[,j])))/(4*sd(U[,j])*sd(V[,j]))
cor(U, V)
diag(cor(U, V))
sapply(1:dim(U), function(j) sum((U[,j] - mean(U[,j]))*(V[,j] - mean(V[,j])))/((dim(U)-1)*sd(U[,j])*sd(V[,j])))
sapply(1:dim(U)[1], function(j) sum((U[,j] - mean(U[,j]))*(V[,j] - mean(V[,j])))/((dim(U)-1)*sd(U[,j])*sd(V[,j])))
sapply(1:dim(U)[1], function(j) sum((U[,j] - mean(U[,j]))*(V[,j] - mean(V[,j])))/((dim(U)[1]-1)*sd(U[,j])*sd(V[,j])))
diag(cor(U, V))
setwd("~/")
setwd("H:/Stats Papers/Semi-supervised learning/Code")
library(data.table)
library(samr)
library(reshape2)
celline <- data.table(read.csv("../Data/nci60-cisplatin-lowdoserange.csv", stringsAsFactors = FALSE),
key = c("CellPanelNbr", "CellLineNbr"))
expression <- data.table(read.csv("../Data/WEB_DATA_GENELOGIC_U133/WEB_DATA_GENELOGIC_U133.TXT",
stringsAsFactors = FALSE,
colClasses = c(rep("character", 4),
"integer", "integer", "integer",
rep("character", 5), rep("numeric", 2)), na.string = "."),
key = c("PANELNBR", "CELLNBR"))
both <- celline[expression]
rm(expression)
### reproducing the coxen algorithm
leaveout <- both[CellPanelName %in% c("Prostate", "Renal")]
training <- both[!CellPanelName %in% c("Prostate", "Renal")]
## step one, select 12 most sensitive and 12 most resistant cell lines
lowhighcuts <- quantile(celline[!CellPanelName %in% c("Prostate", "Renal")]$logValue, c(.2, .8))
training[, high := ifelse(logValue <= lowhighcuts[1], 1, ifelse(logValue >= lowhighcuts[2], 2, NA))]
extremes <- training[!is.na(high)]
featmat <- dcast.data.table(extremes, cellname ~ FEATURE_ID, value.var = "VALUE", fun = function(x) x[1])
highlook <- unique(extremes[, list(cellname, high)])
hilook <- highlook$high
names(hilook) <- highlook$cellname
### use SAM to find subset of genes
X <- t(as.matrix(as.data.frame(featmat)[, -1]))
y <- hilook[featmat[, cellname]]
samfit <- SAM(X, y, resp.type = "Two class unpaired", fdr.output = .1)
cand_sens <- with(samfit$siggenes.table, as.numeric(c(genes.up[,2], genes.lo[,2])))
cand_sens2 <- rownames(X)[cand_sens]
plot(samfit)
U1 <- dcast.data.table(training[FEATURE_ID %in% cand_sens2], cellname ~ FEATURE_ID, value.var = "VALUE", fun = function(x) x[1])
V1 <- dcast.data.table(leaveout[FEATURE_ID %in% cand_sens2], cellname ~ FEATURE_ID, value.var = "VALUE", fun = function(x) x[1])
cor(V1)
V1
cor(as.data.frame(V1)[,-1])
cor(as.data.frame(U1)[,-1])
diag(cor(cor(as.data.frame(U1)[,-1]),
cor(as.data.frame(V1)[,-1])))
rj <- diag(cor(cor(as.data.frame(U1)[,-1]),
cor(as.data.frame(V1)[,-1])))
hist(rj)
rj > quantile(rj, .95)
names(rj)[rj > quantile(rj, .95)]
keepers <- names(rj)[rj > quantile(rj, .95)]
training[FEATURE_ID %in% keepers]
